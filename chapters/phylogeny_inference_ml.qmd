
# Maximum likelihood-based phylogeny inference

In this chapter, we will use the IQ-TREE [@minh2020iq] program to infer phylogenetic trees 
based on maximum-likelihood. 
You can download IQ-TREE [here](https://github.com/iqtree/iqtree2/releases/tag/v2.1.2).

Let's start by loading the required packages:

```{r load-packages}
#| message: false
#| warning: false
library(here)
library(ape)

set.seed(123) # for reproducibility
```

## Goals of this lesson

To demonstrate how to use IQ-TREE, we will use an example data set to
explore a question that used to be hotly debated years ago:

> Are turtles more closely-related to birds or to crocodiles?

There are 3 hypotheses to test, and here we will use maximum-likelihood-based
methods to find out which one is true:

```{r hypotheses-to-test}
#| echo: false
#| fig-width: 12
#| fig-height: 5
#| fig-dpi: 200

suppressPackageStartupMessages(library(ggtree))
suppressPackageStartupMessages(library(patchwork))

# Create tree options
t1 <- "(((Crocodile,Bird),Turtle), (Lizard, Snake));"
t2 <- "(((Turtle,Bird),Crocodile), (Lizard, Snake));"
t3 <- "(((Turtle,Crocodile),Bird), (Lizard, Snake));"

# Create `phylo` objects containing trees
tree1 <- ape::read.tree(text = t1)
tree2 <- ape::read.tree(text = t2)
tree3 <- ape::read.tree(text = t3)

# Plot trees in panel
p1 <- ggtree::ggtree(tree1, aes(
    color = ifelse(label == "Turtle" & !is.na(label), "brown", "black"),
    show.legend = FALSE
)) + 
    ggplot2::scale_color_identity() +
    geom_tiplab() + 
    xlim(0, 4)

p2 <- ggtree::ggtree(tree2, aes(
    color = ifelse(label == "Turtle" & !is.na(label), "brown", "black"),
    show.legend = FALSE
)) + 
    ggplot2::scale_color_identity() +
    geom_tiplab() + 
    xlim(0, 4)

p3 <- ggtree::ggtree(tree3, aes(
    color = ifelse(label == "Turtle" & !is.na(label), "brown", "black"),
    show.legend = FALSE
)) + 
    ggplot2::scale_color_identity() +
    geom_tiplab() + 
    xlim(0, 4)


# Combine plots
combined_trees <- patchwork::wrap_plots(p1, p2, p3, nrow = 1) +
    patchwork::plot_annotation(tag_levels = "A")

combined_trees
```

In this lesson, you will learn to:

- Infer a maximum likelihood tree
- Apply partition models and choose the best partitioning schemes
- Perform tree topology tests
- Identify and remove influential genes
- Calculate concordance factors


## Data description

The data we will use in this lesson were obtained 
from @chiari2012phylogenomic, and they are stored in the `data/` directory 
associated with this course. The files we will use are:

- `turtle.fa`: a multiple sequence alignment (in FASTA) of a subset of the
genes used in the original publication.

- `turtle.nex`: a partition file (in NEXUS) defining a subset of 29 genes. 


## Inferring a maximum likelihood tree

To run IQ-TREE, use the command below:

```{bash}
#| eval: false
iqtree2 -s data/turtle.fa -B 1000 -T 2
```


::: {.callout-note collapse="true"}

## Understanding the command-line arguments

The argument `-s` is mandatory, and this is where you indicate where
the file containing the MSA is. In our previous command, 
`iqtree2 -s data/turtle.fa` means *"run IQ-TREE using the MSA in the file data/turtle.fa"*. 

The other arguments and their meanings are:

- `-B`: number of replicates for the ultrafast bootstrap 
(see @minh2013ultrafast for details). Here, we used 1000 replicates.
- `-T`: number of CPU cores to use. Here, we're using 2 cores, because
IQ-TREE defaults to using all available cores.


For a complete list of arguments and the possible values they take,
run `iqtree2 -h`.

:::

The main IQ-TREE report will be stored in a file ending in `.iqtree`,
and the maximum likelihood tree (in Newick format) will be stored in a file
ending in `.treefile`.


::: {.callout-tip}

## Exercises

1. Look at the report file in `data/turtle.fa.iqtree` and answer the questions 
below. Hint: you can use the `readLines()` function to read the output to
the R session.

    - What is the best-fit model name?
    - What are the AIC/AICc/BIC scores of this model and tree?

2. Visualise the tree in `data/turtle.fa.treefile`. What relationship among 
three trees does this tree support? What is the ultrafast bootstrap 
support (%) for the relevant clade?

3. In the figure below, you can see the tree published 
by @chiari2012phylogenomic. Does the inferred tree agree with the 
published tree?

![Species tree inferred by Chiari *et al*, 2012](chiari_2012_species_tree.png)


::: {.callout collapse="true" appearance="minimal"}

### Solution

```{r q1_answer}
#| fig-height: 5
#| fig-width: 9

# Read file
turtle_report <- readLines(here("data", "turtle.fa.iqtree"))

# Q1A: Best-fit model
turtle_report[grepl("Best-fit model", turtle_report)]

# Q1B: AIC/AICc/BIC scores for the best model
turtle_report[grepl("^Model  |^GTR\\+F\\+R3", turtle_report)]


# Q2
tree <- read.tree(here("data", "turtle.fa.treefile"))
plot(tree, show.node.label = TRUE)
```

:::
:::


## Applying partition models

Now, we will infer a ML tree applying a partition model [@chernomor2016terrace], 
which means that each partition (specified in the `turtle.nex` file) will be 
allowed to have its own model.

```{bash iqtree-partition}
#| eval: false
iqtree2 -s data/turtle.fa -p data/turtle.nex -B 1000 -T 2
```


::: {.callout-note collapse="true"}

## Understanding the command-line arguments

The only new argument here is `-p turtle.nex`, which is used to specify
an *edge-linked proportional* partition model, so that each partition can
have shorter or longer tree length (i.e., slower or faster evolutionary rates,
respectively).
:::


As in the simpler IQ-TREE run, the main report is in a file ending in
`.nex.iqtree`, and the tree is in a file named `.nex.treefile`.


::: {.callout-tip}

## Exercises

1. Look at the report file in `data/turtle.nex.iqtree`. What are the 
AIC/AICc/BIC scores of the partition model? Is it better than 
the previous model?

2. Visualize the tree in `data/turtle.nex.treefile`. 
What relationship among three trees does this tree support?
What is the ultrafast bootstrap support (%) for the relevant clade?

3. Does the inferred tree agree with the published 
tree [@chiari2012phylogenomic]?

::: {.callout collapse="true" appearance="minimal"}

### Solution

```{r}
#| fig-height: 6
#| fig-width: 9

# Q1 
part_report <- readLines(here("data", "turtle.nex.iqtree"))
part_report[grepl("Best-fit model", part_report)]
idx <- grep("List of best-fit models", part_report)
idx <- seq(idx, idx + 30)

part_report[idx]

# Q2
tree <- read.tree(here("data", "turtle.nex.treefile"))
plot(tree, show.node.label = TRUE)
```

:::
:::


## Selecting the best partitioning scheme with PartitionFinder

Now, we will use PartitionFinder [@lanfear2012partitionfinder] to merge
partitions and reduce the potential over-parameterization.

```{bash}
#| eval: false
iqtree2 -s data/turtle.fa -p data/turtle.nex -B 1000 -T 2 -m MFP+MERGE -rcluster 10 --prefix data/turtle.merge
```

::: {.callout-note collapse="true"}

## Understanding the command-line arguments

Besides the arguments we've already seen, the new arguments and 
their meanings are:

- `-m`: specifies the model to use. Here, `MFP+MERGE` indicates running
PartitionFinder followed by tree reconstruction.

- `-rcluster`: to reduce computations by only examining the top n% (here, 10%)
partitioning schemes using the 
*relaxed clustering algorithm* [@lanfear2014selecting].

- `--prefix`: specifies the prefix for all output files to avoid overwriting
the output of previous runs.

:::

The main report is a file ending in `.merge.iqtree`, and the tree is in a
file ending in `.merge.treefile`.


::: {.callout-tip}

## Exercises

1. Look at the report file `data/turtle.merge.iqtree` and answer the questions:

    - How many partitions do we have now?
    - Look at the AIC/AICc/BIC scores. Compared with two previous models, is this model better or worse?
    
2. Visualize the tree in `data/turtle.merge.treefile`. What relationship 
among three trees does this tree support? What is the ultrafast bootstrap 
support (%) for the relevant clade?

3. Does this tree agree with the published tree [@chiari2012phylogenomic]?


::: {.callout collapse="true" appearance="minimal"}

### Solution

```{r}
#| fig-height: 6
#| fig-width: 9

# Read report
merge_report <- readLines(here("data", "turtle.merge.iqtree"))

# Q1A: number of partitions
merge_report[grepl("Input data:", merge_report)]

# Q1B: compare AIC/AICc/BIC scores
idx <- grep("List of best-fit models per partition", merge_report)
idx <- seq(idx, idx + 10)

merge_report[idx]

# Q2
tree <- read.tree(here("data", "turtle.merge.treefile"))
plot(tree, show.node.label = TRUE)

```

:::
:::


## Tree topology tests

Tree topology tests can be used to find out if different trees have
significant differences in log-likelihoods. To do that, you can use
the SH test [@shimodaira1999multiple] or expected likelihood 
weights [@strimmer2002inferring].


Before running the tests, we first need to concatenate the trees in a single
file:

```{r}
# Read tree inferred with a single model as plain text
tree_single <- readLines(here("data", "turtle.fa.treefile"))

# Read tree inferred with partition models as plain text
tree_partitioned <- readLines(here("data", "turtle.nex.treefile"))

# Combine trees and export to file
tree_combined <- c(tree_single, tree_partitioned)
writeLines(tree_combined, con = here("data", "turtle.trees"))
```

Now, we can pass the concatenated tree to IQ-TREE:

```{bash}
#| eval: false
iqtree2 -s data/turtle.fa -p data/turtle.merge.best_scheme.nex \
    -z data/turtle.trees \
    -zb 10000 -au -n 0 \
    --prefix data/turtle.test
```

::: {.callout-note collapse="true"}

## Understanding the command-line arguments

Besides the arguments we've already seen, the new arguments and 
their meanings are:

- `-z`: path to the file containing the concatenated trees.
- `-zb`: number of replicates for *approximate* bootstrap for the tree
topology tests (here, 10000).
- `-au`: perform the Approximately Unbiased test.
- `-n 0`: avoid tree search and just perform tree topology tests.
:::


The main report is a file ending in `.test.iqtree`, and the tree is 
in a file ending in `.test.treefile`.

The KH, SH and AU tests return p-values. Thus, a tree is rejected if 
its p-value <0.05 (marked with a `-` sign).


::: {.callout-tip}

## Exercises

1. Look at the "USER TREES" section in the report file 
`data/turtle.test.iqtree` and answer the questions:

    - Which tree has the worst log-likelihood?
    - Can you reject this tree according to the Shimodaira Hasegawa test, 
    assuming a p-value cutoff of 0.05?
    - Can you reject this tree according to the Approximately Unbiased test, 
    assuming a p-value cutoff of 0.05?

::: {.callout collapse="true" appearance="minimal"}

### Solution

```{r}
# Read report and get the "USER TREES" section
test_report <- readLines(here("data", "turtle.test.iqtree"))
idx <- grep("USER TREES", test_report)
idx <- seq(idx, length(test_report))

test_report[idx]
```

:::

:::


## Concordance factors

In previous analyses, we were assuming that gene trees and species tree
are the same. However, in empirical data, gene trees are often different
from species trees, which we call *discordance*. Now, we will infer different
gene trees for each partition separately, and then quantify the concordance
between gene trees and species tree with **concordance factors**.

First, let's infer one gene tree for each partition.

```{bash}
#| eval: false
iqtree2 -s data/turtle.fa -S data/turtle.nex --prefix data/turtle.loci -T 2
```

Now, we can calculate concordance factors using the list of trees in file
`turtle.loci.treefile`. 

```{bash}
#| eval: false
iqtree2 -t data/turtle.nex.treefile \
    --gcf data/turtle.loci.treefile \
    -s data/turtle.fa \
    --scf 100
```

The code below calculates two kinds of concordance factors:

- **Gene concordance factor (gCF):** percentage of *decisive* gene trees 
concordant with a particular branch of the species tree (0% <= gCF(b) <= 100%).
- **Site concordance factor (sCF):** percentage of *decisive* alignment sites 
supporting a particular branch of the species tree (~33% <= sCF(b) <= 100%). 
sCF <33% means that another discordant branch b’ is more supported, 
whereas sCF=100% means that branch b is supported by all sites.


::: {.callout-tip}

## Exercises

1. Visualize the tree in `data/turtle.nex.treefile.cf.tree`. How do gCF and
sCF look compared with bootstrap support values?

2. **Challenge:** read concordance factors stats in 
file `data/turtle.nex.treefile.cf.stat` and create a scatterplot 
using {ggplot2} showing gCF in the x-axis, sCF in the y-axis, and points
colored by bootstrap support values. What do you conclude?

::: {.callout collapse="true" appearance="minimal"}

### Solution

```{r}
#| fig-height: 8
#| fig-width: 10

# Q1
tree <- read.tree(here("data", "turtle.nex.treefile.cf.tree"))
plot(tree, show.node.label = TRUE)

# Q2
cf_stats <- read.table(
    here("data", "turtle.nex.treefile.cf.stat"), header = TRUE
)

# Q2
library(ggplot2)
ggplot(cf_stats, aes(x = gCF, y = sCF, color = Label)) +
    geom_point(size = 3) +
    scale_color_viridis_c(direction = -1) +
    xlim(0, 100) + 
    ylim(0, 100) +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed")
```

:::
:::




## References {.unnumbered}

