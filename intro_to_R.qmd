
# Introduction to R

The R programming language is a powerful tool for evolutionary biology 
research, offering a vast array of statistical and visualization tools 
that are essential for data analysis. With its extensive library of packages, 
R allows researchers to quickly and easily perform complex statistical 
analyses, including phylogenetic analyses, genome-wide association studies, 
and population genetics. R also provides a range of plotting and visualization 
functions that enable researchers to explore and present their data in a clear 
and concise manner. Additionally, R can be used in conjunction with other 
software tools, such as BEAST and IQ-TREE, to facilitate more complex 
evolutionary analyses. Due to its versatility and user-friendly interface, 
R has become an increasingly popular choice for evolutionary biologists 
looking to conduct high-quality research.

## Goals of this lesson

This lesson was designed to be a gentle introduction to R for evolutionary
genomics. Thus, we will only cover the basics of the language. An alternative
name for this lesson could be 
*"all you need to know about R to start your evolutionary analyses"*. At
the end of this lesson, you will be able to:

- perform simple mathematical operations in R
- create and modify objects
- use functions and look for help
- create vectors and understand the difference between vector types
- create data frames
- subset vectors and data frames


## Creating objects

The simplest use of R is to perform mathematical operations, which can be 
simply typed in the console:

```{r}
2 + 2

4 * 5

20 / 10

5 - 3
```

However, simple mathematical operations are not very useful. Typically,
you would want to assign *values* to *R objects*. R objects can be
created by using `object_name` + `<-` + `value`. The `<-` symbol is called
the "assignment operator", and it assigns values to objects. Example:

```{r}
genome_size <- 2000000
```

Note that when you assign a value to an object, nothing happens on the screen.
In the example above, we created an object named `genome_size` that contains
the value `2000000`, but the value is not printed to screen. To show
the contents of an object, you must type its name and execute it. For example:

```{r}
genome_size
```

Alternatively, we can assign values to objects *AND* print them at the same time
by surrounding the assignment code with parentheses. For example:

```{r}
(genome_size <- 2000000)
```

::: {.callout-tip}

### Naming objects

Although you can give your objects whatever name you want, some
general best practices include:

1. Choose a **descriptive** name, but **not too long**.
2. Do not use dots (`.`).
3. Use nouns.
4. Be consistent with your styling. Styles include **snake case** 
(e.g., `phylo_tree`) and **camel case** (e.g., `phyloTree`.)

Note that object names **cannot start with numbers**.

:::

Now that we have an object `genome_size` with a value, we can use the
object to perform mathematical operations. For example, let's suppose
we want to see the genome size in many thousands of base pairs 
(i.e., kbp, which stands for kilobase pairs):

```{r}
genome_size / 1000
```

We can also change the value of an object by assigning a new value to it.
For instance, let's update the `genome_size` object with the size in kbp:

```{r}
genome_size # original object

genome_size <- genome_size / 1000 # modifying the object
genome_size
```

As you can see, the object `genome_size` now contains the value `2000`.

::: {.callout-tip}

### Exercises

1. Create an object named ``

:::

## Functions and arguments

Functions are scripts that automate a particular task, and they typically have
verbs in their names. They are made available to users as part of *packages*,
and there are several R packages with specialized functions for each field.
When you download and install R, it already comes with some packages installed,
such as **base** and **utils**, but you can also install other packages
depending on your needs.


A function takes one or many arguments as input and return something as output.
To execute a function in R, you need to write the function name followed by
the arguments inside parenthesis. For example, let's execute the function 
`sqrt()`, which takes a numeric value as input and return its square root:

```{r}
sqrt(100)
```

You can also pass objects as input to functions. For example, let's pass our
object `genome_size` to the `sqrt()` function:

```{r}
sqrt(genome_size)
```

To see all the possible arguments a function takes, use the function `args()`
with the function name as input. For example, let's see all possible arguments
for the `round()` function (which rounds up numbers):

```{r}
args(round)
```

We can see that the `round()` function can take two arguments as input: 
`x`, which is a numeric value, and `digits`, which indicates how many digits
should be used when rounding values. Let's try to execute the `round()` function
with different options to `digits`.

```{r}
pi <- 3.14159
round(pi)
round(pi, digits = 2)
round(pi, digits = 3)
```

Finally, if you want to learn more about what a function does and how to use it,
you can type the function name preceded by a question mark. For example:

```{r}
?round
```

This will open up a help page with detailed information on what the function 
does, its arguments, and examples.

## Data structures

### Vectors

### Data frames

## Subsetting